// @flow strict
import type { Node } from 'react';

type UseStateType<S>(
  initialState: (() => S) | S,
): [S, ((S => S) | S) => void];

declare export function useList<T>(list: T[], render: (item: T, index: number) => Node): Node;

declare export function useRequest<T>(options?: {
  loading?: boolean,
  data?: any,
  errors?: any,
}): {
  request: (fn: { data: T } | Promise<{ data: T }>, params?: { concat?: boolean | string }) => Promise<T>,
  data: T,
  errors: { [key: string]: any },
  loading: boolean,
  setData: UseStateType<any>,
  setErrors: UseStateType<{
    [key: string]: string | string[];
  }>,
  setLoading: UseStateType<boolean>,
}<T>;